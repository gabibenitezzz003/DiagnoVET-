version: '3.8'

services:
  # Frontend (Next.js) - Producción
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.production
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - NEXT_PUBLIC_GEMINI_API_KEY=${NEXT_PUBLIC_GEMINI_API_KEY}
      - NEXT_PUBLIC_N8N_CHATBOT_WEBHOOK_URL=${NEXT_PUBLIC_N8N_CHATBOT_WEBHOOK_URL}
      - NEXT_PUBLIC_N8N_CALENDARIO_WEBHOOK_URL=${NEXT_PUBLIC_N8N_CALENDARIO_WEBHOOK_URL}
    restart: unless-stopped
    networks:
      - diagnovet-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/api/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend (FastAPI) - Producción
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - JWT_SECRET=${JWT_SECRET}
      - LOG_LEVEL=info
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - diagnovet-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/salud" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx (Reverse Proxy) - Producción
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - diagnovet-network

  # Redis (Caché) - Producción
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - diagnovet-network
    command: redis-server --requirepass ${REDIS_PASSWORD}

  # PostgreSQL (Base de datos local opcional)
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-diagnovet}
      - POSTGRES_USER=${POSTGRES_USER:-diagnovet}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./supabase/base_datos_supabase.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - diagnovet-network

volumes:
  postgres_data:
  redis_data:


networks:
  diagnovet-network:
    driver: bridge
